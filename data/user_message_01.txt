# ================================  HEXAGEN API SPEC ================================
# All information is expressed as simple key–value line.
# One entity per line; indentation (2 spaces) shows containment.

Import: from hexagen import Game, Tile, Shape, Line, Circle, Triangle

Constant: WIDTH = 18  
Constant: HEIGHT = 10  
Constant: COLORS = ['white','black','yellow','green','red','blue','purple','orange']  
Constant: DIRECTIONS = {'up','down','right','left','up_right','down_left','up_left','down_right'}

# -----------------------------------------------------------------------------------------------
Class: Game  
  Method: __init__(width:int = WIDTH, height:int = HEIGHT)  
  Method: start(width:int = WIDTH, height:int = HEIGHT) -> Game  
  Method: __enter__() -> Game  
  Method: __exit__(exc_type, exc, tb) -> bool  
  Method: record_step(step_name:str)  
  Method: get_record(step_names:str | list[str]) -> Shape  
  Method: plot(gold_boards:list[int] | list[list[int]] | None = None, multiple:bool = False, file_name:str | None = None) -> Figure

# -----------------------------------------------------------------------------------------------
Class: Shape  
  Doc: Base class for a collection of hexagonal tiles.  
  Method: __init__(tiles:list[Tile], from_linds:bool = False, from_hexagons:bool = False, game:Game | None = None)  
  Method: draw(color:str) -> Shape  
  Method: copy_paste(shift_direction:str | None = None, spacing:int = 0, reference_shape:Shape | None = None, source:Tile | None = None, destination:Tile | None = None, shift:_Vec | None = None) -> Shape      # auto-paints  
  Method: reflect(axis_line:Line | None = None, column:int | None = None, axis_direction:str | None = None, tile_on_axis:Tile | None = None) -> Shape  # auto-paints  
  Method: grid(shift_direction:str, spacing:int, num_copies:int | None = None) -> Shape        # auto-paints  
  Method: rotate(center_tile:Tile, angle:int) -> Shape       # auto-paints  
  Method: recolor(color_map:dict[str,str]) -> Shape  
  Method: get(criterion:str) -> Shape  
  Method: neighbors(criterion:str = 'all') -> Shape  
  Method: boundary(criterion:str = 'all') -> Shape  
  Method: edge(direction:str) -> Shape  
  Method: extreme(direction:str) -> Shape  
  Method: is_empty() -> bool  
  Method: overlaps(other:Shape) -> bool  
  Method: center() -> Tile  
  Static: get_entire_board(game:Game | None = None) -> Shape  
  Static: get_board_perimeter(game:Game | None = None) -> Shape  
  Static: get_color(color:str, game:Game | None = None) -> Shape  
  Static: get_column(column:int, game:Game | None = None) -> Shape  
  Static: polygon(vertices:Shape | list[Tile] | Tile, *extra_vertices:Tile) -> Shape

# -----------------------------------------------------------------------------------------------
Class: Tile (inherits: Shape)  
  Method: __init__(column:int, row:int, game:Game | None = None)  
  Method: neighbor(direction:str) -> Tile  
  Method: on_board() -> bool  
  Property: color:str  
  Property: column:int  
  Property: row:int  
  Property: offset:tuple[int,int]

# -----------------------------------------------------------------------------------------------
Class: Line (inherits: Shape)  
  Method: __init__(start_tile:Tile, end_tile:Tile | None = None, direction:str | None = None, length:int | None = None, end_tiles:Shape | None = None, include_start_tile:bool = True, include_end_tile:bool = True)  
  Method: parallel(shift_direction:str, spacing:int) -> Line  
  Method: draw(color:str) -> Line      # inherited implementation

# -----------------------------------------------------------------------------------------------
Class: Circle (inherits: Shape)  
  Method: __init__(center_tile:Tile, radius:int = 1)  
  Method: draw(color:str) -> Circle    # inherited implementation

# -----------------------------------------------------------------------------------------------
Class: Triangle (inherits: Shape)  
  Method: __init__(start_tile:Tile, point:str, start_tile_type:str, side_length:int = 2)  
  Method: draw(color:str) -> Triangle  # inherited implementation

# -----------------------------------------------------------------------------------------------
Snippet: g = Game()           # ← already created by the runner  
Snippet: board_state = g.board_state   # ← must appear as last line
# -----------------------------------------------------------------------------------------------
##### CONTEXT (completed instructions so far)
{HISTORY_BLOCK}

##### CURRENT SCRIPT
```python
{CODE_SO_FAR}
{NEXT_STEP}
```